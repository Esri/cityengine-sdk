//
// Esri CityEngine SDK Maya Plugin Example
//
// This example demonstrates the main functionality of the Procedural Runtime API.
// Esri R&D Center Zurich, Switzerland
//
// See http://github.com/ArcGIS/esri-cityengine-sdk for instructions.

proc string[] appendAarray(string $a0[], string $a1[]) {
	string $result[] = $a0;
	for($e in $a1)
		$result[size($result)] = $e;
	return $result;
}

proc string[] collectInitialShapes(string $nodes[], string $rulePackage) {
	string $result[];
	for($node in $nodes) {
	    string $type = `nodeType $node`;
		if($type == "mesh") {
			string $dsts[] = `connectionInfo -dfs ($node + ".outMesh")`;
			if(size($dsts)) {
				for($dst in $dsts) {
					string $dstNode = `match "[^.]*" $dst`;
					if(`nodeType $dstNode` == "prt") {
						setAttr -type "string" ($dstNode + ".Rule_Package") $rulePackage;
						return $result;
					}
				}
			}
			$result = appendAarray($result, {$node});
		} else if($type == "transform") {
			string $tmp[] = collectInitialShapes(`listRelatives -ni -pa -children $node`, $rulePackage);
			$result = appendAarray($result, $tmp);
		}
	}
	return $result;	  
}

global proc createPrtNode() {
	string $select[] = `ls -sl`;
	
	if(!(size($select))) {
		confirmDialog -title "Missing selection" -message "Please select a polygon first in order to apply a rule." -button "OK";
	}

	$filters = "Rule Package (*.rpk);;All Files (*.*)";
	string $rulePackage[] = `fileDialog2 -fm 1 -cap "Select Rule Package" -ff $filters`;
	
	if(size($rulePackage)) {
		string $initialShapes[] = collectInitialShapes($select, $rulePackage[0]);
		for($node in $initialShapes) {
			$prtName = `createNode prt`;
			$prtName = `rename $prtName "prt#"`;
			prtAttrs $prtName $rulePackage;
			string $parent[]  = `listRelatives -parent $node`;
			string $meshName;
            string $prtMaterialName;
			if(size($parent)) {
                $prtMaterialName = `createNode prtMaterial`;
				$meshName = `createNode -parent $parent[0] mesh`;
			} else {
                $prtMaterialName = `createNode prtMaterial`;
				$meshName = `createNode -parent $node mesh`;
			}
            $prtMaterialName = `rename $prtMaterialName "prtMaterial#"`;
			$meshName = `rename $meshName "prtShape#"`;
            connectAttr ( ( $prtName + ".outMesh" ), ( $prtMaterialName + ".inMesh" ) );
			connectAttr ( ( $prtMaterialName + ".outMesh" ), ( $meshName + ".inMesh" ) );
			connectAttr ( ( $node + ".outMesh" ), ( $prtName + ".inMesh" ) );
			sets -addElement initialShadingGroup $meshName;
		}
	}
}

global proc createPrtMenu() {
	global string $gMainWindow;
	global string $gPrtMenu = "prtMenu"; 

	setParent $gMainWindow;
	if (`isTrue "BaseMayaExists"`) { 
		menu -l "PRT" -aob true -to true -postMenuCommandOnce true $gPrtMenu;
		setParent -m ..; 
		setParent -m $gPrtMenu;
		menuItem -divider true;
		menuItem -label "Attach Rule..."  -c "createPrtNode" -annotation "Attach a CGA rule package to a geometry";
		setParent -m ..;
	}
}

global proc prt4mayaCreateUI() {
 	createPrtMenu();
}

// --- material helpers

global proc prtSetDiffuseTexture(string $sgName, string $texturePath, string $uvSet) {
	string $shName = $sgName + "H";
	shadingNode -asShader lambert -n $shName;
	connectAttr -f ($shName + ".outColor") ($sgName + ".surfaceShader");

	string $nodeName = $sgName + "F";

	shadingNode -asTexture file -n $nodeName;
	connectAttr -force ($nodeName + ".outColor") ($shName + ".color");
	setAttr ($nodeName + ".fileTextureName") -type "string" $texturePath;
}

global proc prtSetColor(string $sgName, float $r, float $g, float $b) {
	$shaderPlug = `connectionInfo -sfd ($sgName + ".surfaceShader")`;
	$shName = `plugNode $shaderPlug`;

	string $nodeName = "prtColor_" + $sgName;

	shadingNode -asShader blinn -n $nodeName;
	setAttr ($nodeName + ".color") -type "double3" $r $g $b;
	connectAttr -force ($nodeName + ".outColor") ($sgName + ".surfaceShader");
}
